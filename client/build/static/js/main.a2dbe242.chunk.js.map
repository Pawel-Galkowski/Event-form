{"version":3,"sources":["reducers/index.js","reducers/alert.js","actions/types.js","store.js","actions/alert.js","components/layout/Alert.js","components/form/EventForm.js","actions/forms.js","App.js","serviceWorker.js","index.js"],"names":["combineReducers","alert","state","action","type","payload","filter","id","middleware","thunk","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","setAlert","msg","alertType","timeout","dispatch","uuidv4","setTimeout","connect","alerts","length","map","key","data-testid","className","eventForm","formData","a","config","headers","axios","post","res","data","statusText","status","today","Date","toISOString","substring","useState","name","nameError","surname","surnameError","email","emailError","date","dateError","formName","subject","setFormData","onChange","e","target","value","onSubmit","preventDefault","test","validate","window","location","reload","htmlFor","placeholder","required","min","max","App","exact","path","component","EventForm","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4PAGeA,4BAAgB,CAC7BC,MCIa,SAASC,EAAOC,GAC7B,IAAOC,EAAiBD,EAAjBC,KAAMC,EAAWF,EAAXE,QAGb,OAFAH,EAAQ,GAEAE,GACN,ICVqB,YDWnB,MAAM,GAAN,mBAAWF,GAAX,CAAkBG,IACpB,ICbwB,eDctB,OAAOH,EAAMI,QAAO,SAACL,GAAD,OAAWA,EAAMM,KAAOF,KAC9C,QACE,OAAOH,METPM,EAAa,CAACC,KAQLC,EANDC,sBACVC,EALiB,GAOjBC,8BAAoBC,kBAAe,WAAf,EAAmBN,K,0ECX9BO,EAAW,SAACC,EAAKC,GAAN,IAAiBC,EAAjB,uDAA2B,IAA3B,OAAoC,SAACC,GAC3D,IAAMZ,EAAKa,eACXD,EAAS,CACPf,KFHqB,YEIrBC,QAAS,CAACW,MAAKC,YAAWV,QAG5Bc,YAAW,kBAAMF,EAAS,CAACf,KFRD,eEQqBC,QAASE,MAAMW,KCejDI,eAJS,SAACpB,GAAD,MAAY,CAClCqB,OAAQrB,EAAMD,SAGDqB,EArBD,SAAC,GAAD,IAAEC,EAAF,EAAEA,OAAF,OACD,OAAXA,GACAA,EAAOC,OAAS,GAChBD,EAAOE,KAAI,SAACxB,GAAD,OACT,yBACEyB,IAAKzB,EAAMM,GACXoB,cAAY,SACZC,UAAS,sBAAiB3B,EAAMgB,YAE/BhB,EAAMe,WCiJEM,cAAQ,KAAM,CAACO,UCrJL,SAACC,GAAD,8CAAc,WAAOX,GAAP,iBAAAY,EAAA,6DAC/BC,EAAS,CACbC,QAAS,CACP,eAAgB,qBAHiB,kBAOjBC,IAAMC,KAAK,mBAAoBL,EAAUE,GAPxB,OAO7BI,EAP6B,OASnCjB,EAAS,CACPf,KLnBmB,YKoBnBC,QAAS+B,EAAIC,OAGflB,EAASJ,EAAS,eAAgB,YAdC,gDAgBnCI,EAAS,CACPf,KLzBoB,aK0BpBC,QAAS,CAACW,IAAK,KAAIsB,WAAYC,OAAQ,KAAIA,UAlBV,yDAAd,wDDqJVjB,EAxJG,SAAC,GAAiB,IAAhBO,EAAe,EAAfA,UACZW,GAAQ,IAAIC,MAAOC,cAAcC,UAAU,EAAG,IAIpD,EAAgCC,mBAAS,CACvCC,KAAM,GACNC,UAAW,GACXC,QAAS,GACTC,aAAc,GACdC,MAAO,GACPC,WAAY,GACZC,KAAM,GACNC,UAAW,GACXC,SAZgB,iBAahBC,QAZmB,0BAErB,mBAAOxB,EAAP,KAAiByB,EAAjB,KAaMC,EAAW,SAACC,GAChBF,EAAY,2BAAIzB,GAAL,kBAAgB2B,EAAEC,OAAOb,KAAOY,EAAEC,OAAOC,UAoDtD,OACE,yBAAK/B,UAAU,YACb,yBAAKA,UAAU,kBACb,6BAASA,UAAU,gBACjB,iCACE,yBAAKA,UAAU,cACb,4BA3EM,kBA4EN,8DAEF,0BAAMD,cAAY,OAAOC,UAAU,WAAWgC,SArBrC,SAACH,GAClBA,EAAEI,iBAtCa,WACf,IAAIf,EAAY,GACZI,EAAa,GACbF,EAAe,GACfI,EAAY,GAmBhB,QAjBKtB,EAASe,MAAQf,EAASe,KAAKrB,OAAS,KAC3CsB,EAAY,wBAGThB,EAASiB,UACZC,EAAe,2BAIZ,gDAAgDc,KAAKhC,EAASmB,SACjEC,EAAa,sBAGVpB,EAASqB,OACZC,EAAY,0BAGVN,GAAaE,GAAgBE,GAAcE,KAC7CG,EAAY,2BACPzB,GADM,IAETgB,YACAE,eACAE,aACAE,gBAEK,GAQOW,KAEdlC,EAAUC,GACVyB,EAAY,IACZlC,YAAW,WACT2C,OAAOC,SAASC,WACf,QAcK,yBAAKtC,UAAU,cACb,yBAAKA,UAAU,cACb,2BAAOuC,QAAQ,QAAf,cACA,2BACE/D,KAAK,OACLgE,YAAY,OACZvB,KAAK,OACLW,SAAUA,EACVa,UAAQ,IAEV,yBAAKzC,UAAU,cACZE,EAASgB,YAGd,yBAAKlB,UAAU,cACb,2BAAOuC,QAAQ,WAAf,aACA,2BACE/D,KAAK,OACLgE,YAAY,UACZvB,KAAK,UACLW,SAAUA,EACVa,UAAQ,IAEV,yBAAKzC,UAAU,cACZE,EAASkB,gBAIhB,2BAAOmB,QAAQ,SAAf,iBACA,2BACE/D,KAAK,QACLgE,YAAY,QACZvB,KAAK,QACLW,SAAUA,EACVa,UAAQ,IAEV,yBAAKzC,UAAU,cACZE,EAASoB,YAEZ,2BAAOiB,QAAQ,QAAf,cACA,2BACExC,cAAY,OACZvB,KAAK,OACLyC,KAAK,OACLyB,IAAK9B,EACL+B,IAAI,aACJf,SAAUA,EACVa,UAAQ,IAEV,yBAAKzC,UAAU,cACZE,EAASsB,WAEZ,kBAAC,EAAD,MACA,2BACE7C,GAAG,SACHoB,cAAY,OACZvB,KAAK,SACLuD,MAAM,iBEzHPa,G,MAhBH,WACV,OACE,kBAAC,IAAD,CAAU9D,MAAOA,GACf,kBAAC,IAAD,KACE,kBAAC,WAAD,KACE,8BACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO+D,OAAK,EAACC,KAAK,IAAIC,UAAWC,WCF3BC,QACa,cAA7Bb,OAAOC,SAASa,UAEW,UAA7Bd,OAAOC,SAASa,UAEhBd,OAAOC,SAASa,SAASC,MACrB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2I3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACnBC,MAAK,SAACC,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a2dbe242.chunk.js","sourcesContent":["import {combineReducers} from 'redux';\nimport alert from './alert';\n\nexport default combineReducers({\n  alert,\n});\n","import {SET_ALERT, REMOVE_ALERT} from '../actions/types';\n\n/**\n  * Controller to management an alerts\n  * @param {string} state - has informations about actuall state\n  * @param {object} action - has infromation about request\n  * @return {Array} response infromation from controller\n  */\nexport default function(state, action) {\n  const {type, payload} = action;\n  state = [];\n\n  switch (type) {\n    case SET_ALERT:\n      return [...state, payload];\n    case REMOVE_ALERT:\n      return state.filter((alert) => alert.id !== payload);\n    default:\n      return state;\n  }\n}\n","export const FORM_SEND = 'FORM_SEND';\nexport const FORM_ERROR = 'FORM_ERROR';\nexport const REMOVE_ALERT = 'REMOVE_ALERT';\nexport const SET_ALERT = 'SET_ALERT';\nexport const PERSON_REMOVED = 'PERSON_REMOVED';\nexport const REMOVED_ERROR = 'REMOVED_ERROR';\n","import {createStore, applyMiddleware} from 'redux';\nimport {\n  composeWithDevTools,\n} from 'redux-devtools-extension/logOnlyInProduction';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers';\n\nconst initialState = {};\n\nconst middleware = [thunk];\n\nconst store = createStore(\n    rootReducer,\n    initialState,\n    composeWithDevTools(applyMiddleware(...middleware)),\n);\n\nexport default store;\n","import {v4 as uuidv4} from 'uuid';\nimport {SET_ALERT, REMOVE_ALERT} from './types';\n\nexport const setAlert = (msg, alertType, timeout = 5000) => (dispatch) => {\n  const id = uuidv4();\n  dispatch({\n    type: SET_ALERT,\n    payload: {msg, alertType, id},\n  });\n\n  setTimeout(() => dispatch({type: REMOVE_ALERT, payload: id}), timeout);\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {connect} from 'react-redux';\n\nconst Alert = ({alerts}) =>\n  alerts !== null &&\n  alerts.length > 0 &&\n  alerts.map((alert) => (\n    <div\n      key={alert.id}\n      data-testid=\"alerts\"\n      className={`alert alert-${alert.alertType}`}\n    >\n      {alert.msg}\n    </div>\n  ));\n\nAlert.propTypes = {\n  alerts: PropTypes.array.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  alerts: state.alert,\n});\n\nexport default connect(mapStateToProps)(Alert);\n","import React, {useState} from 'react';\nimport PropTypes from 'prop-types';\nimport {connect} from 'react-redux';\nimport {eventForm} from '../../actions/forms';\nimport Alert from '../layout/Alert';\n\nconst EventForm = ({eventForm}) => {\n  const today = new Date().toISOString().substring(0, 10);\n  const eventName = 'Brainhub Event';\n  const eventSubject = 'Register confirmation';\n\n  const [formData, setFormData] = useState({\n    name: '',\n    nameError: '',\n    surname: '',\n    surnameError: '',\n    email: '',\n    emailError: '',\n    date: '',\n    dateError: '',\n    formName: eventName,\n    subject: eventSubject,\n  });\n\n  const onChange = (e) => {\n    setFormData({...formData, [e.target.name]: e.target.value});\n  };\n\n  const validate = () => {\n    let nameError = '';\n    let emailError = '';\n    let surnameError = '';\n    let dateError = '';\n\n    if (!formData.name || formData.name.length < 2) {\n      nameError = 'Name cannot be blank';\n    }\n\n    if (!formData.surname) {\n      surnameError = 'Surname cannot be blank';\n    }\n\n    // eslint-disable-next-line\n    if (!/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/.test(formData.email)) {\n      emailError = 'Email is not valid';\n    }\n\n    if (!formData.date) {\n      dateError = 'Date cannot be blank';\n    }\n\n    if (nameError || surnameError || emailError || dateError) {\n      setFormData({\n        ...formData,\n        nameError,\n        surnameError,\n        emailError,\n        dateError,\n      });\n      return false;\n    }\n\n    return true;\n  };\n\n  const formSubmit = (e) => {\n    e.preventDefault();\n    const isValid = validate();\n    if (isValid) {\n      eventForm(formData);\n      setFormData({});\n      setTimeout(() => {\n        window.location.reload();\n      }, 3000);\n    }\n  };\n\n  return (\n    <div className=\"fullSide\">\n      <div className=\"main-container\">\n        <section className=\"formTemplate\">\n          <article>\n            <div className=\"headerText\">\n              <h3>{eventName}</h3>\n              <h1>Let&apos;s register to next event!</h1>\n            </div>\n            <form data-testid=\"form\" className=\"mainForm\" onSubmit={formSubmit}>\n              <div className=\"double-box\">\n                <div className=\"inline-box\">\n                  <label htmlFor=\"name\">First name</label>\n                  <input\n                    type=\"text\"\n                    placeholder=\"Name\"\n                    name=\"name\"\n                    onChange={onChange}\n                    required\n                  />\n                  <div className=\"wrong-data\">\n                    {formData.nameError}\n                  </div>\n                </div>\n                <div className=\"inline-box\">\n                  <label htmlFor=\"surname\">Last name</label>\n                  <input\n                    type=\"text\"\n                    placeholder=\"Surname\"\n                    name=\"surname\"\n                    onChange={onChange}\n                    required\n                  />\n                  <div className=\"wrong-data\">\n                    {formData.surnameError}\n                  </div>\n                </div>\n              </div>\n              <label htmlFor=\"email\">E-mail Adress</label>\n              <input\n                type=\"email\"\n                placeholder=\"Email\"\n                name=\"email\"\n                onChange={onChange}\n                required\n              />\n              <div className=\"wrong-data\">\n                {formData.emailError}\n              </div>\n              <label htmlFor=\"date\">Event date</label>\n              <input\n                data-testid=\"date\"\n                type=\"date\"\n                name=\"date\"\n                min={today}\n                max=\"2099-12-31\"\n                onChange={onChange}\n                required\n              />\n              <div className=\"wrong-data\">\n                {formData.dateError}\n              </div>\n              <Alert />\n              <input\n                id=\"submit\"\n                data-testid=\"send\"\n                type=\"submit\"\n                value=\"Send\"\n              />\n            </form>\n          </article>\n        </section>\n      </div>\n    </div>\n  );\n};\n\nEventForm.propTypes = {\n  eventForm: PropTypes.func.isRequired,\n};\n\nexport default connect(null, {eventForm})(EventForm);\n","import axios from 'axios';\nimport {setAlert} from './alert';\nimport {\n  FORM_ERROR,\n  FORM_SEND,\n  PERSON_REMOVED,\n  REMOVED_ERROR,\n} from './types';\n\nexport const eventForm = (formData) => async (dispatch) => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  };\n  try {\n    const res = await axios.post('/forms/EventForm', formData, config);\n\n    dispatch({\n      type: FORM_SEND,\n      payload: res.data,\n    });\n\n    dispatch(setAlert('Message send', 'success'));\n  } catch (err) {\n    dispatch({\n      type: FORM_ERROR,\n      payload: {msg: err.statusText, status: err.status},\n    });\n  }\n};\n\nexport const removePerson = (formData) => async (dispatch) => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  };\n  try {\n    const res = await axios.post('/forms/removePerson', formData, config);\n\n    dispatch({\n      type: PERSON_REMOVED,\n      payload: res.data,\n    });\n\n    dispatch(setAlert('Message send', 'success'));\n  } catch (err) {\n    dispatch({\n      type: REMOVED_ERROR,\n      payload: {msg: err.statusText, status: err.status},\n    });\n  }\n};\n","import React, {Fragment} from 'react';\nimport {BrowserRouter as Router, Route, Switch} from 'react-router-dom';\nimport {Provider} from 'react-redux';\nimport store from './store';\nimport EventForm from './components/form/EventForm';\nimport './stylesheet/App.css';\n\nconst App = () => {\n  return (\n    <Provider store={store}>\n      <Router>\n        <Fragment>\n          <main>\n            <Switch>\n              <Route exact path=\"/\" component={EventForm} />\n            </Switch>\n          </main>\n        </Fragment>\n      </Router>\n    </Provider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n  ),\n);\n/**\n  * ServiceWorker - controller of client server side\n  * @param {Object} config - has informations about server config\n  */\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n              'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\n/**\n  * Register of a walid url\n  * @param {Object} swUrl - has informations about url registration\n  * @param {Object} config - has informations about server config\n  */\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n      .register(swUrl)\n      .then((registration) => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          if (installingWorker == null) {\n            return;\n          }\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n                console.log(\n                    'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n                );\n\n                // Execute callback\n                if (config && config.onUpdate) {\n                  config.onUpdate(registration);\n                }\n              } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n                console.log('Content is cached for offline use.');\n\n                // Execute callback\n                if (config && config.onSuccess) {\n                  config.onSuccess(registration);\n                }\n              }\n            }\n          };\n        };\n      })\n      .catch((error) => {\n        console.error('Error during service worker registration:', error);\n      });\n}\n/**\n  * Check the serviceWorker config\n  * @param {Object} swUrl - has informations about url registration\n  * @param {Object} config - has informations about server config\n  */\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: {'Service-Worker': 'script'},\n  })\n      .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n        const contentType = response.headers.get('content-type');\n        if (\n          response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n        ) {\n        // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then((registration) => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n        // Service worker found. Proceed as normal.\n          registerValidSW(swUrl, config);\n        }\n      })\n      .catch(() => {\n        console.log(\n            'No internet connection found. App is running in offline mode.',\n        );\n      });\n}\n/**\n  * Remove service worker\n  */\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n        .then((registration) => {\n          registration.unregister();\n        })\n        .catch((error) => {\n          console.error(error.message);\n        });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}